import {
  useDeleteReleaseActionMutation
} from "./chunk-WJB72J7I.js";
import {
  useRBAC
} from "./chunk-WIFIVZU3.js";
import {
  useAPIErrorHandler
} from "./chunk-FTSHQ5RF.js";
import {
  useAuth
} from "./chunk-RZWN45NY.js";
import {
  isFetchError
} from "./chunk-TXOJWASW.js";
import {
  useNotification
} from "./chunk-PW6GS6S3.js";
import {
  AccessibleIcon,
  Field,
  Flex,
  Menu,
  VisuallyHidden,
  useIntl
} from "./chunk-Y6YT4U2T.js";
import {
  NavLink
} from "./chunk-S65ZWNEO.js";
import {
  ForwardRef$1V,
  ForwardRef$1v,
  ForwardRef$45
} from "./chunk-QW5ZDDTU.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/constants.mjs
var PERMISSIONS = {
  main: [
    {
      action: "plugin::content-releases.read",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ],
  create: [
    {
      action: "plugin::content-releases.create",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ],
  update: [
    {
      action: "plugin::content-releases.update",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ],
  delete: [
    {
      action: "plugin::content-releases.delete",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ],
  createAction: [
    {
      action: "plugin::content-releases.create-action",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ],
  deleteAction: [
    {
      action: "plugin::content-releases.delete-action",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ],
  publish: [
    {
      action: "plugin::content-releases.publish",
      subject: null,
      id: "",
      actionParameters: {},
      properties: {},
      conditions: []
    }
  ]
};

// node_modules/@strapi/content-releases/dist/admin/components/ReleaseActionOptions.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var getBorderLeftRadiusValue = (actionType) => {
  return actionType === "publish" ? 1 : 0;
};
var getBorderRightRadiusValue = (actionType) => {
  return actionType === "publish" ? 0 : 1;
};
var FieldWrapper = dt(Field.Root)`
  border-top-left-radius: ${({ $actionType, theme }) => theme.spaces[getBorderLeftRadiusValue($actionType)]};
  border-bottom-left-radius: ${({ $actionType, theme }) => theme.spaces[getBorderLeftRadiusValue($actionType)]};
  border-top-right-radius: ${({ $actionType, theme }) => theme.spaces[getBorderRightRadiusValue($actionType)]};
  border-bottom-right-radius: ${({ $actionType, theme }) => theme.spaces[getBorderRightRadiusValue($actionType)]};

  > label {
    color: inherit;
    padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[3]}`};
    text-align: center;
    vertical-align: middle;
    text-transform: capitalize;
  }

  &[data-checked='true'] {
    color: ${({ theme, $actionType }) => $actionType === "publish" ? theme.colors.primary700 : theme.colors.danger600};
    background-color: ${({ theme, $actionType }) => $actionType === "publish" ? theme.colors.primary100 : theme.colors.danger100};
    border-color: ${({ theme, $actionType }) => $actionType === "publish" ? theme.colors.primary700 : theme.colors.danger600};
  }

  &[data-checked='false'] {
    border-left: ${({ $actionType }) => $actionType === "unpublish" && "none"};
    border-right: ${({ $actionType }) => $actionType === "publish" && "none"};
  }

  &[data-checked='false'][data-disabled='false']:hover {
    color: ${({ theme }) => theme.colors.neutral700};
    background-color: ${({ theme }) => theme.colors.neutral100};
    border-color: ${({ theme }) => theme.colors.neutral200};

    & > label {
      cursor: pointer;
    }
  }

  &[data-disabled='true'] {
    color: ${({ theme }) => theme.colors.neutral600};
    background-color: ${({ theme }) => theme.colors.neutral150};
    border-color: ${({ theme }) => theme.colors.neutral300};
  }
`;
var ActionOption = ({ selected, actionType, handleChange, name, disabled = false }) => {
  return (0, import_jsx_runtime.jsx)(FieldWrapper, {
    $actionType: actionType,
    background: "primary0",
    borderColor: "neutral200",
    color: selected === actionType ? "primary600" : "neutral600",
    position: "relative",
    cursor: "pointer",
    "data-checked": selected === actionType,
    "data-disabled": disabled && selected !== actionType,
    children: (0, import_jsx_runtime.jsxs)(Field.Label, {
      children: [
        (0, import_jsx_runtime.jsx)(VisuallyHidden, {
          children: (0, import_jsx_runtime.jsx)(Field.Input, {
            type: "radio",
            name,
            checked: selected === actionType,
            onChange: handleChange,
            value: actionType,
            disabled
          })
        }),
        actionType
      ]
    })
  });
};
var ReleaseActionOptions = ({ selected, handleChange, name, disabled = false }) => {
  return (0, import_jsx_runtime.jsxs)(Flex, {
    children: [
      (0, import_jsx_runtime.jsx)(ActionOption, {
        actionType: "publish",
        selected,
        handleChange,
        name,
        disabled
      }),
      (0, import_jsx_runtime.jsx)(ActionOption, {
        actionType: "unpublish",
        selected,
        handleChange,
        name,
        disabled
      })
    ]
  });
};

// node_modules/@strapi/content-releases/dist/admin/components/ReleaseActionMenu.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var StyledMenuLink = dt(Menu.Item)`
  span,
  &:hover span {
    color: ${({ theme }) => theme.colors["neutral800"]};
  }

  svg path,
  &:hover svg path {
    fill: ${({ theme }) => theme.colors["neutral500"]};
  }
`;
var DeleteReleaseActionItem = ({ releaseId, actionId }) => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const [deleteReleaseAction] = useDeleteReleaseActionMutation();
  const { allowedActions: { canDeleteAction } } = useRBAC(PERMISSIONS);
  const handleDeleteAction = async () => {
    const response = await deleteReleaseAction({
      params: {
        releaseId,
        actionId
      }
    });
    if ("data" in response) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.content-manager-edit-view.remove-from-release.notification.success",
          defaultMessage: "Entry removed from release"
        })
      });
      return;
    }
    if ("error" in response) {
      if (isFetchError(response.error)) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(response.error)
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatMessage({
            id: "notification.error",
            defaultMessage: "An error occurred"
          })
        });
      }
    }
  };
  if (!canDeleteAction) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(Menu.Item, {
    variant: "danger",
    startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$45, {}),
    onSelect: handleDeleteAction,
    children: formatMessage({
      id: "content-releases.content-manager-edit-view.remove-from-release",
      defaultMessage: "Remove from release"
    })
  });
};
var ReleaseActionEntryLinkItem = ({ contentTypeUid, documentId, locale }) => {
  const { formatMessage } = useIntl();
  const userPermissions = useAuth("ReleaseActionEntryLinkItem", (state) => state.permissions);
  const canUpdateEntryForLocale = React.useMemo(() => {
    var _a, _b;
    const updatePermissions = userPermissions.find((permission) => permission.subject === contentTypeUid && permission.action === "plugin::content-manager.explorer.update");
    if (!updatePermissions) {
      return false;
    }
    return Boolean(!locale || ((_b = (_a = updatePermissions.properties) == null ? void 0 : _a.locales) == null ? void 0 : _b.includes(locale)));
  }, [
    contentTypeUid,
    locale,
    userPermissions
  ]);
  const { allowedActions: { canUpdate: canUpdateContentType } } = useRBAC({
    updateContentType: [
      {
        action: "plugin::content-manager.explorer.update",
        subject: contentTypeUid
      }
    ]
  });
  if (!canUpdateContentType || !canUpdateEntryForLocale) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(StyledMenuLink, {
    /* @ts-expect-error inference isn't working in DS */
    tag: NavLink,
    isLink: true,
    to: {
      pathname: `/content-manager/collection-types/${contentTypeUid}/${documentId}`,
      search: locale && `?plugins[i18n][locale]=${locale}`
    },
    startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$1v, {}),
    children: formatMessage({
      id: "content-releases.content-manager-edit-view.edit-entry",
      defaultMessage: "Edit entry"
    })
  });
};
var EditReleaseItem = ({ releaseId }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime2.jsx)(StyledMenuLink, {
    /* @ts-expect-error inference isn't working in DS */
    tag: NavLink,
    isLink: true,
    to: `/plugins/content-releases/${releaseId}`,
    startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$1v, {}),
    children: formatMessage({
      id: "content-releases.content-manager-edit-view.edit-release",
      defaultMessage: "Edit release"
    })
  });
};
var Root = ({ children }) => {
  const { formatMessage } = useIntl();
  const { allowedActions } = useRBAC(PERMISSIONS);
  return (
    // A user can access the dropdown if they have permissions to delete a release-action OR update a release
    allowedActions.canDeleteAction || allowedActions.canUpdate ? (0, import_jsx_runtime2.jsxs)(Menu.Root, {
      children: [
        (0, import_jsx_runtime2.jsx)(StyledMoreButton, {
          variant: "tertiary",
          endIcon: null,
          paddingLeft: "7px",
          paddingRight: "7px",
          children: (0, import_jsx_runtime2.jsx)(AccessibleIcon, {
            label: formatMessage({
              id: "content-releases.content-manager-edit-view.release-action-menu",
              defaultMessage: "Release action options"
            }),
            children: (0, import_jsx_runtime2.jsx)(ForwardRef$1V, {})
          })
        }),
        (0, import_jsx_runtime2.jsx)(Menu.Content, {
          top: 1,
          popoverPlacement: "bottom-end",
          children
        })
      ]
    }) : null
  );
};
var StyledMoreButton = dt(Menu.Trigger)`
  & > span {
    display: flex;
  }
`;
var ReleaseActionMenu = {
  Root,
  EditReleaseItem,
  DeleteReleaseActionItem,
  ReleaseActionEntryLinkItem
};

// node_modules/@strapi/content-releases/dist/admin/pluginId.mjs
var pluginId = "content-releases";

export {
  PERMISSIONS,
  ReleaseActionOptions,
  ReleaseActionMenu,
  pluginId
};
//# sourceMappingURL=chunk-UVPT7Z34.js.map
