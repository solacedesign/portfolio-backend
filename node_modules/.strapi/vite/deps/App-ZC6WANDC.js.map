{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/components/EntryValidationPopover.tsx", "../../../@strapi/content-releases/admin/src/components/RelativeTime.tsx", "../../../@strapi/content-releases/admin/src/components/ReleaseModal.tsx", "../../../@strapi/content-releases/admin/src/store/hooks.ts", "../../../@strapi/content-releases/admin/src/utils/api.ts", "../../../@strapi/content-releases/admin/src/pages/ReleasesPage.tsx", "../../../@strapi/content-releases/admin/src/pages/ReleaseDetailsPage.tsx", "../../../@strapi/content-releases/admin/src/pages/App.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { FormErrors, FormValues } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Button, LinkButton, Flex, Typography, Popover } from '@strapi/design-system';\nimport { CheckCircle, CrossCircle, ArrowsCounterClockwise, CaretDown } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl, MessageDescriptor } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionEntry,\n  Stage,\n} from '../../../shared/contracts/release-actions';\nimport type { Struct } from '@strapi/types';\n\nconst StyledPopoverFlex = styled(Flex)`\n  width: 100%;\n  max-width: 256px;\n\n  & > * {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n\n  & > *:last-child {\n    border-bottom: none;\n  }\n`;\n\ninterface EntryValidationPopoverProps {\n  action: ReleaseAction['type'];\n  schema?: Struct.ContentTypeSchema & {\n    hasReviewWorkflow: boolean;\n    stageRequiredToPublish?: Stage;\n  };\n  entry: ReleaseActionEntry;\n  status: ReleaseAction['status'];\n}\n\ninterface ValidationStatusProps {\n  action: ReleaseAction['type'];\n  status: ReleaseAction['status'];\n  hasErrors: boolean | null;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}\n\nconst EntryStatusTrigger = ({\n  action,\n  status,\n  hasErrors,\n  requiredStage,\n  entryStage,\n}: ValidationStatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (action === 'publish') {\n    if (hasErrors || (requiredStage && requiredStage.id !== entryStage?.id)) {\n      return (\n        <Popover.Trigger>\n          <Button\n            variant=\"ghost\"\n            startIcon={<CrossCircle fill=\"danger600\" />}\n            endIcon={<CaretDown />}\n          >\n            <Typography textColor=\"danger600\" variant=\"omega\" fontWeight=\"bold\">\n              {formatMessage({\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.not-ready',\n                defaultMessage: 'Not ready to publish',\n              })}\n            </Typography>\n          </Button>\n        </Popover.Trigger>\n      );\n    }\n\n    if (status === 'draft') {\n      return (\n        <Popover.Trigger>\n          <Button\n            variant=\"ghost\"\n            startIcon={<CheckCircle fill=\"success600\" />}\n            endIcon={<CaretDown />}\n          >\n            <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n              {formatMessage({\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish',\n                defaultMessage: 'Ready to publish',\n              })}\n            </Typography>\n          </Button>\n        </Popover.Trigger>\n      );\n    }\n\n    if (status === 'modified') {\n      return (\n        <Popover.Trigger>\n          <Button\n            variant=\"ghost\"\n            startIcon={<ArrowsCounterClockwise fill=\"alternative600\" />}\n            endIcon={<CaretDown />}\n          >\n            <Typography variant=\"omega\" fontWeight=\"bold\" textColor=\"alternative600\">\n              {formatMessage({\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.modified',\n                defaultMessage: 'Ready to publish changes',\n              })}\n            </Typography>\n          </Button>\n        </Popover.Trigger>\n      );\n    }\n\n    return (\n      <Popover.Trigger>\n        <Button\n          variant=\"ghost\"\n          startIcon={<CheckCircle fill=\"success600\" />}\n          endIcon={<CaretDown />}\n        >\n          <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n            {formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.already-published',\n              defaultMessage: 'Already published',\n            })}\n          </Typography>\n        </Button>\n      </Popover.Trigger>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <Popover.Trigger>\n        <Button\n          variant=\"ghost\"\n          startIcon={<CheckCircle fill=\"success600\" />}\n          endIcon={<CaretDown />}\n        >\n          <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n            {formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish',\n              defaultMessage: 'Ready to unpublish',\n            })}\n          </Typography>\n        </Button>\n      </Popover.Trigger>\n    );\n  }\n\n  return (\n    <Popover.Trigger>\n      <Button variant=\"ghost\" startIcon={<CheckCircle fill=\"success600\" />} endIcon={<CaretDown />}>\n        <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.already-unpublished',\n            defaultMessage: 'Already unpublished',\n          })}\n        </Typography>\n      </Button>\n    </Popover.Trigger>\n  );\n};\n\ninterface FieldsValidationProps {\n  hasErrors: boolean;\n  errors: FormErrors<FormValues> | null;\n  kind?: string;\n  contentTypeUid?: string;\n  documentId?: string;\n  locale?: string;\n}\n\nconst FieldsValidation = ({\n  hasErrors,\n  errors,\n  kind,\n  contentTypeUid,\n  documentId,\n  locale,\n}: FieldsValidationProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields',\n            defaultMessage: 'Fields',\n          })}\n        </Typography>\n        {hasErrors ? <CrossCircle fill=\"danger600\" /> : <CheckCircle fill=\"success600\" />}\n      </Flex>\n      <Typography width=\"100%\" textColor=\"neutral600\">\n        {hasErrors\n          ? formatMessage(\n              {\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.error',\n                defaultMessage: '{errors} errors on fields.',\n              },\n              { errors: errors ? Object.keys(errors).length : 0 }\n            )\n          : formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.success',\n              defaultMessage: 'All fields are filled correctly.',\n            })}\n      </Typography>\n      {hasErrors && (\n        <LinkButton\n          tag={Link}\n          to={{\n            pathname: `/content-manager/${kind === 'collectionType' ? 'collection-types' : 'single-types'}/${contentTypeUid}/${documentId}`,\n            search: locale\n              ? stringify({\n                  plugins: {\n                    i18n: {\n                      locale,\n                    },\n                  },\n                })\n              : '',\n          }}\n          variant=\"secondary\"\n          fullWidth\n          state={{ forceValidation: true }}\n        >\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors',\n            defaultMessage: 'See errors',\n          })}\n        </LinkButton>\n      )}\n    </Flex>\n  );\n};\n\nconst getReviewStageIcon = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return <CheckCircle fill=\"neutral200\" />;\n  }\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return <CrossCircle fill=\"danger600\" />;\n  }\n  return <CheckCircle fill=\"success600\" />;\n};\n\nconst getReviewStageMessage = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n  formatMessage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n  formatMessage: (messageDescriptor: MessageDescriptor, values?: Record<string, string>) => string;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return formatMessage({\n      id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled',\n      defaultMessage: 'This entry is not associated to any workflow.',\n    });\n  }\n\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready',\n        defaultMessage: 'This entry is not at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  if (requiredStage && requiredStage.id === entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready',\n        defaultMessage: 'This entry is at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  return formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required',\n    defaultMessage: 'No required stage for publication',\n  });\n};\n\nconst ReviewStageValidation = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  const { formatMessage } = useIntl();\n\n  const Icon = getReviewStageIcon({\n    contentTypeHasReviewWorkflow,\n    requiredStage,\n    entryStage,\n  });\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage',\n            defaultMessage: 'Review stage',\n          })}\n        </Typography>\n        {Icon}\n      </Flex>\n      <Typography textColor=\"neutral600\">\n        {getReviewStageMessage({\n          contentTypeHasReviewWorkflow,\n          requiredStage,\n          entryStage,\n          formatMessage,\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\nexport const EntryValidationPopover = ({\n  schema,\n  entry,\n  status,\n  action,\n}: EntryValidationPopoverProps) => {\n  const { validate, isLoading } = unstable_useDocument(\n    {\n      collectionType: schema?.kind ?? '',\n      model: schema?.uid ?? '',\n    },\n    {\n      // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request\n      skip: true,\n    }\n  );\n\n  // Validation errors\n  const errors = isLoading ? null : validate(entry);\n  const hasErrors = errors ? Object.keys(errors).length > 0 : false;\n\n  // Entry stage\n  const contentTypeHasReviewWorkflow = schema?.hasReviewWorkflow ?? false;\n  const requiredStage = schema?.stageRequiredToPublish;\n  const entryStage = entry.strapi_stage;\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Popover.Root>\n      <EntryStatusTrigger\n        action={action}\n        status={status}\n        hasErrors={hasErrors}\n        requiredStage={requiredStage}\n        entryStage={entryStage}\n      />\n      <Popover.Content>\n        <StyledPopoverFlex direction=\"column\">\n          <FieldsValidation\n            hasErrors={hasErrors}\n            errors={errors}\n            contentTypeUid={schema?.uid}\n            kind={schema?.kind}\n            documentId={entry.documentId}\n            locale={entry.locale}\n          />\n          <ReviewStageValidation\n            contentTypeHasReviewWorkflow={contentTypeHasReviewWorkflow}\n            requiredStage={requiredStage}\n            entryStage={entryStage}\n          />\n        </StyledPopoverFlex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n", "import * as React from 'react';\n\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\ninterface CustomInterval {\n  unit: keyof Duration;\n  text: string;\n  threshold: number;\n}\n\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\n  timestamp: Date;\n  customIntervals?: CustomInterval[];\n}\n\n/**\n * Displays the relative time between a given timestamp and the current time.\n * You can display a custom message for given time intervals by passing an array of custom intervals.\n *\n * @example\n * ```jsx\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\n * <RelativeTime\n *  timestamp={new Date('2021-01-01')}\n *  customIntervals={[\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\n *  ]}\n * ```\n */\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\n\n    /**\n     * TODO: make this auto-update, like a clock.\n     */\n    const interval = intervalToDuration({\n      start: timestamp,\n      end: Date.now(),\n      // see https://github.com/date-fns/date-fns/issues/2891 – No idea why it's all partial it returns it every time.\n    }) as Required<Duration>;\n\n    const unit = intervals.find((intervalUnit) => {\n      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\n    })!;\n\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\n\n    // Display custom text if interval is less than the threshold\n    const customInterval = customIntervals.find(\n      (custom) => interval[custom.unit] < custom.threshold\n    );\n\n    const displayText = customInterval\n      ? customInterval.text\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\n\n    return (\n      <time\n        ref={forwardedRef}\n        dateTime={timestamp.toISOString()}\n        role=\"time\"\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\n        {...restProps}\n      >\n        {displayText}\n      </time>\n    );\n  }\n);\n\nexport { RelativeTime };\nexport type { CustomInterval, RelativeTimeProps };\n", "import * as React from 'react';\n\nimport {\n  Button,\n  Modal,\n  TextInput,\n  Typography,\n  Checkbox,\n  Flex,\n  Box,\n  DatePicker,\n  TimePicker,\n  Combobox,\n  ComboboxOption,\n  Field,\n} from '@strapi/design-system';\nimport { formatISO } from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { Formik, Form, useFormikContext } from 'formik';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nimport { pluginId } from '../pluginId';\nimport { getTimezones } from '../utils/time';\nimport { RELEASE_SCHEMA } from '../validation/schemas';\n\nexport interface FormValues {\n  name: string;\n  date?: string;\n  time: string;\n  timezone: string | null;\n  isScheduled?: boolean;\n  scheduledAt: Date | null;\n}\n\ninterface ReleaseModalProps {\n  handleClose: () => void;\n  handleSubmit: (values: FormValues) => void;\n  isLoading?: boolean;\n  initialValues: FormValues;\n  open?: boolean;\n}\n\nexport const ReleaseModal = ({\n  handleClose,\n  open,\n  handleSubmit,\n  initialValues,\n  isLoading = false,\n}: ReleaseModalProps) => {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const isCreatingRelease = pathname === `/plugins/${pluginId}`;\n  // Set default first timezone from the list if no system timezone detected\n  const { timezoneList, systemTimezone = { value: 'UTC+00:00-Africa/Abidjan ' } } = getTimezones(\n    initialValues.scheduledAt ? new Date(initialValues.scheduledAt) : new Date()\n  );\n\n  /**\n   * Generate scheduled time using selected date, time and timezone\n   */\n  const getScheduledTimestamp = (values: FormValues) => {\n    const { date, time, timezone } = values;\n    if (!date || !time || !timezone) return null;\n    const timezoneWithoutOffset = timezone.split('&')[1];\n    return zonedTimeToUtc(`${date} ${time}`, timezoneWithoutOffset);\n  };\n\n  /**\n   * Get timezone with offset to show the selected value in the dropdown\n   */\n  const getTimezoneWithOffset = () => {\n    const currentTimezone = timezoneList.find(\n      (timezone) => timezone.value.split('&')[1] === initialValues.timezone\n    );\n    return currentTimezone?.value || systemTimezone.value;\n  };\n\n  return (\n    <Modal.Root open={open} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage(\n              {\n                id: 'content-releases.modal.title',\n                defaultMessage:\n                  '{isCreatingRelease, select, true {New release} other {Edit release}}',\n              },\n              { isCreatingRelease: isCreatingRelease }\n            )}\n          </Modal.Title>\n        </Modal.Header>\n        <Formik\n          onSubmit={(values) => {\n            handleSubmit({\n              ...values,\n              timezone: values.timezone ? values.timezone.split('&')[1] : null,\n              scheduledAt: values.isScheduled ? getScheduledTimestamp(values) : null,\n            });\n          }}\n          initialValues={{\n            ...initialValues,\n            timezone: initialValues.timezone ? getTimezoneWithOffset() : systemTimezone.value,\n          }}\n          validationSchema={RELEASE_SCHEMA}\n          validateOnChange={false}\n        >\n          {({ values, errors, handleChange, setFieldValue }) => {\n            return (\n              <Form>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <Field.Root\n                      name=\"name\"\n                      error={\n                        errors.name &&\n                        formatMessage({ id: errors.name, defaultMessage: errors.name })\n                      }\n                      required\n                    >\n                      <Field.Label>\n                        {formatMessage({\n                          id: 'content-releases.modal.form.input.label.release-name',\n                          defaultMessage: 'Name',\n                        })}\n                      </Field.Label>\n                      <TextInput value={values.name} onChange={handleChange} />\n                      <Field.Error />\n                    </Field.Root>\n                    <Box width=\"max-content\">\n                      <Checkbox\n                        name=\"isScheduled\"\n                        checked={values.isScheduled}\n                        onCheckedChange={(checked) => {\n                          setFieldValue('isScheduled', checked);\n                          if (!checked) {\n                            // Clear scheduling info from a release on unchecking schedule release, which reset scheduling info in DB\n                            setFieldValue('date', null);\n                            setFieldValue('time', '');\n                            setFieldValue('timezone', null);\n                          } else {\n                            // On ticking back schedule release date, time and timezone should be restored to the initial state\n                            setFieldValue('date', initialValues.date);\n                            setFieldValue('time', initialValues.time);\n                            setFieldValue(\n                              'timezone',\n                              initialValues.timezone ?? systemTimezone?.value\n                            );\n                          }\n                        }}\n                      >\n                        <Typography\n                          textColor={values.isScheduled ? 'primary600' : 'neutral800'}\n                          fontWeight={values.isScheduled ? 'semiBold' : 'regular'}\n                        >\n                          {formatMessage({\n                            id: 'modal.form.input.label.schedule-release',\n                            defaultMessage: 'Schedule release',\n                          })}\n                        </Typography>\n                      </Checkbox>\n                    </Box>\n                    {values.isScheduled && (\n                      <>\n                        <Flex gap={4} alignItems=\"start\">\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"date\"\n                              error={\n                                errors.date &&\n                                formatMessage({ id: errors.date, defaultMessage: errors.date })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.date',\n                                  defaultMessage: 'Date',\n                                })}\n                              </Field.Label>\n                              <DatePicker\n                                onChange={(date) => {\n                                  const isoFormatDate = date\n                                    ? formatISO(date, { representation: 'date' })\n                                    : null;\n                                  setFieldValue('date', isoFormatDate);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('date', null);\n                                }}\n                                value={values.date ? new Date(values.date) : new Date()}\n                                minDate={utcToZonedTime(new Date(), values.timezone.split('&')[1])}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"time\"\n                              error={\n                                errors.time &&\n                                formatMessage({ id: errors.time, defaultMessage: errors.time })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.time',\n                                  defaultMessage: 'Time',\n                                })}\n                              </Field.Label>\n                              <TimePicker\n                                onChange={(time) => {\n                                  setFieldValue('time', time);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('time', '');\n                                }}\n                                value={values.time || undefined}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                        </Flex>\n                        <TimezoneComponent timezoneOptions={timezoneList} />\n                      </>\n                    )}\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\" name=\"cancel\">\n                      {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                    </Button>\n                  </Modal.Close>\n                  <Button name=\"submit\" loading={isLoading} type=\"submit\">\n                    {formatMessage(\n                      {\n                        id: 'content-releases.modal.form.button.submit',\n                        defaultMessage: '{isCreatingRelease, select, true {Continue} other {Save}}',\n                      },\n                      { isCreatingRelease: isCreatingRelease }\n                    )}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\n/**\n * Generates the list of timezones and user's current timezone(system timezone)\n */\ninterface ITimezoneOption {\n  offset: string;\n  value: string;\n}\n\nconst TimezoneComponent = ({ timezoneOptions }: { timezoneOptions: ITimezoneOption[] }) => {\n  const { values, errors, setFieldValue } = useFormikContext<FormValues>();\n  const { formatMessage } = useIntl();\n  const [timezoneList, setTimezoneList] = React.useState<ITimezoneOption[]>(timezoneOptions);\n\n  React.useEffect(() => {\n    if (values.date) {\n      // Update the timezone offset which varies with DST based on the date selected\n      const { timezoneList } = getTimezones(new Date(values.date));\n      setTimezoneList(timezoneList);\n\n      const updatedTimezone =\n        values.timezone &&\n        timezoneList.find((tz) => tz.value.split('&')[1] === values.timezone!.split('&')[1]);\n      if (updatedTimezone) {\n        setFieldValue('timezone', updatedTimezone!.value);\n      }\n    }\n  }, [setFieldValue, values.date, values.timezone]);\n\n  return (\n    <Field.Root\n      name=\"timezone\"\n      error={\n        errors.timezone && formatMessage({ id: errors.timezone, defaultMessage: errors.timezone })\n      }\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.modal.form.input.label.timezone',\n          defaultMessage: 'Timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        value={values.timezone || undefined}\n        textValue={values.timezone ? values.timezone.replace(/&/, ' ') : undefined} // textValue is required to show the updated DST timezone\n        onChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onTextValueChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onClear={() => {\n          setFieldValue('timezone', '');\n        }}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n", "import { Dispatch } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { Store } from '@strapi/admin/strapi-admin';\n\ntype RootState = ReturnType<Store['getState']>;\n\nconst useTypedDispatch: () => Dispatch = useDispatch;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useTypedSelector, useTypedDispatch };\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { ApiError } from '@strapi/admin/strapi-admin';\n\ntype BaseQueryError = ApiError | SerializedError;\n\nconst isBaseQueryError = (error?: BaseQueryError): error is BaseQueryError => {\n  return typeof error !== 'undefined' && error.name !== undefined;\n};\n\nexport { isBaseQueryError };\nexport type { BaseQueryError };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  Layouts,\n  GradientBadge,\n} from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport {\n  Alert,\n  Badge,\n  Box,\n  Button,\n  Divider,\n  EmptyStateLayout,\n  Flex,\n  Grid,\n  Main,\n  Tabs,\n  Typography,\n  Link,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { format } from 'date-fns';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetReleases, type Release } from '../../../shared/contracts/releases';\nimport { RelativeTime as BaseRelativeTime } from '../components/RelativeTime';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  useGetReleasesQuery,\n  useGetReleaseSettingsQuery,\n  GetReleasesQueryParams,\n  useCreateReleaseMutation,\n} from '../services/release';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesGrid\n * -----------------------------------------------------------------------------------------------*/\ninterface ReleasesGridProps {\n  sectionTitle: 'pending' | 'done';\n  releases?: GetReleases.Response['data'];\n  isError?: boolean;\n}\n\nconst LinkCard = styled(Link)`\n  display: block;\n`;\n\nconst RelativeTime = styled(BaseRelativeTime)`\n  display: inline-block;\n  &::first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nconst getBadgeProps = (status: Release['status']) => {\n  let color;\n  switch (status) {\n    case 'ready':\n      color = 'success';\n      break;\n    case 'blocked':\n      color = 'warning';\n      break;\n    case 'failed':\n      color = 'danger';\n      break;\n    case 'done':\n      color = 'primary';\n      break;\n    case 'empty':\n    default:\n      color = 'neutral';\n  }\n\n  return {\n    textColor: `${color}600`,\n    backgroundColor: `${color}100`,\n    borderColor: `${color}200`,\n  };\n};\n\nconst ReleasesGrid = ({ sectionTitle, releases = [], isError = false }: ReleasesGridProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  if (releases?.length === 0) {\n    return (\n      <EmptyStateLayout\n        content={formatMessage(\n          {\n            id: 'content-releases.page.Releases.tab.emptyEntries',\n            defaultMessage: 'No releases',\n          },\n          {\n            target: sectionTitle,\n          }\n        )}\n        icon={<EmptyDocuments width=\"16rem\" />}\n      />\n    );\n  }\n\n  return (\n    <Grid.Root gap={4}>\n      {releases.map(({ id, name, scheduledAt, status }) => (\n        <Grid.Item col={3} s={6} xs={12} key={id} direction=\"column\" alignItems=\"stretch\">\n          <LinkCard tag={NavLink} to={`${id}`} isExternal={false}>\n            <Flex\n              direction=\"column\"\n              justifyContent=\"space-between\"\n              padding={4}\n              hasRadius\n              background=\"neutral0\"\n              shadow=\"tableShadow\"\n              height=\"100%\"\n              width=\"100%\"\n              alignItems=\"start\"\n              gap={4}\n            >\n              <Flex direction=\"column\" alignItems=\"start\" gap={1}>\n                <Typography textColor=\"neutral800\" tag=\"h3\" variant=\"delta\" fontWeight=\"bold\">\n                  {name}\n                </Typography>\n                <Typography variant=\"pi\" textColor=\"neutral600\">\n                  {scheduledAt ? (\n                    <RelativeTime timestamp={new Date(scheduledAt)} />\n                  ) : (\n                    formatMessage({\n                      id: 'content-releases.pages.Releases.not-scheduled',\n                      defaultMessage: 'Not scheduled',\n                    })\n                  )}\n                </Typography>\n              </Flex>\n              <Badge {...getBadgeProps(status)}>{status}</Badge>\n            </Flex>\n          </LinkCard>\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst StyledAlert = styled(Alert)`\n  button {\n    display: none;\n  }\n  p + div {\n    margin-left: auto;\n  }\n`;\n\nconst INITIAL_FORM_VALUES = {\n  name: '',\n  date: format(new Date(), 'yyyy-MM-dd'),\n  time: '',\n  isScheduled: true,\n  scheduledAt: null,\n  timezone: null,\n} satisfies FormValues;\n\nconst ReleasesPage = () => {\n  const location = useLocation();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }, setQuery] = useQueryParams<GetReleasesQueryParams>();\n  const response = useGetReleasesQuery(query);\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();\n  const { getFeature } = useLicenseLimits();\n  const { maximumReleases = 3 } = getFeature('cms-content-releases') as {\n    maximumReleases: number;\n  };\n  const { trackUsage } = useTracking();\n  const {\n    allowedActions: { canCreate },\n  } = useRBAC(PERMISSIONS);\n\n  const { isLoading: isLoadingReleases, isSuccess, isError } = response;\n  const activeTab = response?.currentData?.meta?.activeTab || 'pending';\n\n  // Check if we have some errors and show a notification to the user to explain the error\n  React.useEffect(() => {\n    if (location?.state?.errors) {\n      toggleNotification({\n        type: 'danger',\n        title: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.title',\n          defaultMessage: 'Your request could not be processed.',\n        }),\n        message: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.message',\n          defaultMessage: 'Please try again or open another release.',\n        }),\n      });\n      navigate('', { replace: true, state: null });\n    }\n  }, [formatMessage, location?.state?.errors, navigate, toggleNotification]);\n\n  const toggleAddReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  if (isLoadingReleases || isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  const totalPendingReleases = (isSuccess && response.currentData?.meta?.pendingReleasesCount) || 0;\n  const hasReachedMaximumPendingReleases = totalPendingReleases >= maximumReleases;\n\n  const handleTabChange = (tabValue: string) => {\n    setQuery({\n      ...query,\n      page: 1,\n      pageSize: response?.currentData?.meta?.pagination?.pageSize || 16,\n      filters: {\n        releasedAt: {\n          $notNull: tabValue !== 'pending',\n        },\n      },\n    });\n  };\n\n  const handleAddRelease = async ({ name, scheduledAt, timezone }: FormValues) => {\n    const response = await createRelease({\n      name,\n      scheduledAt,\n      timezone,\n    });\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-created-notification-success',\n          defaultMessage: 'Release created.',\n        }),\n      });\n\n      trackUsage('didCreateRelease');\n      navigate(response.data.data.id.toString());\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <Main aria-busy={isLoadingReleases || isLoadingSettings}>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'content-releases.pages.Releases.title',\n          defaultMessage: 'Releases',\n        })}\n        secondaryAction={\n          <GradientBadge\n            label={formatMessage({\n              id: 'components.premiumFeature.title',\n              defaultMessage: 'Premium feature',\n            })}\n          />\n        }\n        subtitle={formatMessage({\n          id: 'content-releases.pages.Releases.header-subtitle',\n          defaultMessage: 'Create and manage content updates',\n        })}\n        primaryAction={\n          canCreate ? (\n            <Button\n              startIcon={<Plus />}\n              onClick={toggleAddReleaseModal}\n              disabled={hasReachedMaximumPendingReleases}\n            >\n              {formatMessage({\n                id: 'content-releases.header.actions.add-release',\n                defaultMessage: 'New release',\n              })}\n            </Button>\n          ) : null\n        }\n      />\n      <Layouts.Content>\n        <>\n          {hasReachedMaximumPendingReleases && (\n            <StyledAlert\n              marginBottom={6}\n              action={\n                <Link href=\"https://strapi.io/pricing-cloud\" isExternal>\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.max-limit-reached.action',\n                    defaultMessage: 'Explore plans',\n                  })}\n                </Link>\n              }\n              title={formatMessage(\n                {\n                  id: 'content-releases.pages.Releases.max-limit-reached.title',\n                  defaultMessage:\n                    'You have reached the {number} pending {number, plural, one {release} other {releases}} limit.',\n                },\n                { number: maximumReleases }\n              )}\n              onClose={() => {}}\n              closeLabel=\"\"\n            >\n              {formatMessage({\n                id: 'content-releases.pages.Releases.max-limit-reached.message',\n                defaultMessage: 'Upgrade to manage an unlimited number of releases.',\n              })}\n            </StyledAlert>\n          )}\n          <Tabs.Root variant=\"simple\" onValueChange={handleTabChange} value={activeTab}>\n            <Box paddingBottom={8}>\n              <Tabs.List\n                aria-label={formatMessage({\n                  id: 'content-releases.pages.Releases.tab-group.label',\n                  defaultMessage: 'Releases list',\n                })}\n              >\n                <Tabs.Trigger value=\"pending\">\n                  {formatMessage(\n                    {\n                      id: 'content-releases.pages.Releases.tab.pending',\n                      defaultMessage: 'Pending ({count})',\n                    },\n                    {\n                      count: totalPendingReleases,\n                    }\n                  )}\n                </Tabs.Trigger>\n                <Tabs.Trigger value=\"done\">\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.tab.done',\n                    defaultMessage: 'Done',\n                  })}\n                </Tabs.Trigger>\n              </Tabs.List>\n              <Divider />\n            </Box>\n            {/* Pending releases */}\n            <Tabs.Content value=\"pending\">\n              <ReleasesGrid\n                sectionTitle=\"pending\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n            {/* Done releases */}\n            <Tabs.Content value=\"done\">\n              <ReleasesGrid\n                sectionTitle=\"done\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n          </Tabs.Root>\n          <Pagination.Root\n            {...response?.currentData?.meta?.pagination}\n            defaultPageSize={response?.currentData?.meta?.pagination?.pageSize}\n          >\n            <Pagination.PageSize options={['8', '16', '32', '64']} />\n            <Pagination.Links />\n          </Pagination.Root>\n        </>\n      </Layouts.Content>\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleAddReleaseModal}\n        handleSubmit={handleAddRelease}\n        isLoading={isSubmittingForm}\n        initialValues={{\n          ...INITIAL_FORM_VALUES,\n          timezone: data?.data.defaultTimezone ? data.data.defaultTimezone.split('&')[1] : null,\n        }}\n      />\n    </Main>\n  );\n};\n\nexport { ReleasesPage, getBadgeProps };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  Menu,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error – TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Main aria-busy={isLoadingDetails}>\n      <Layouts.Header\n        title={release.name}\n        subtitle={\n          <Flex gap={2} lineHeight={6}>\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n            </Typography>\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n          </Flex>\n        }\n        navigationAction={<BackButton fallback=\"..\" />}\n        primaryAction={\n          !release.releasedAt && (\n            <Flex gap={2}>\n              <SimpleMenuButton\n                label={<More />}\n                variant=\"tertiary\"\n                endIcon={null}\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                aria-label={formatMessage({\n                  id: 'content-releases.header.actions.open-release-actions',\n                  defaultMessage: 'Release edit and delete menu',\n                })}\n                popoverPlacement=\"bottom-end\"\n              >\n                <Menu.Item\n                  disabled={!canUpdate}\n                  onSelect={toggleEditReleaseModal}\n                  startIcon={<Pencil />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                </Menu.Item>\n                <Menu.Item\n                  disabled={!canDelete}\n                  onSelect={toggleWarningSubmit}\n                  variant=\"danger\"\n                  startIcon={<Trash />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.delete',\n                    defaultMessage: 'Delete',\n                  })}\n                </Menu.Item>\n                <ReleaseInfoWrapper\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  gap={1}\n                  padding={4}\n                >\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\n                    {formatMessage({\n                      id: 'content-releases.header.actions.created',\n                      defaultMessage: 'Created',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" color=\"neutral300\">\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\n                    {formatMessage(\n                      {\n                        id: 'content-releases.header.actions.created.description',\n                        defaultMessage:\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                      },\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\n                    )}\n                  </Typography>\n                </ReleaseInfoWrapper>\n              </SimpleMenuButton>\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                {formatMessage({\n                  id: 'content-releases.header.actions.refresh',\n                  defaultMessage: 'Refresh',\n                })}\n              </Button>\n              {canPublish ? (\n                <Button\n                  size=\"S\"\n                  variant=\"default\"\n                  onClick={handlePublishRelease(release.id.toString())}\n                  loading={isPublishing}\n                  disabled={release.actions.meta.count === 0}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.publish',\n                    defaultMessage: 'Publish',\n                  })}\n                </Button>\n              ) : null}\n            </Flex>\n          )\n        }\n      />\n      {children}\n    </Main>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        <Pagination.Root\n          {...releaseMeta?.pagination}\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\n        >\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n", "import { Page } from '@strapi/admin/strapi-admin';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { PERMISSIONS } from '../constants';\n\nimport { ReleaseDetailsPage } from './ReleaseDetailsPage';\nimport { ReleasesPage } from './ReleasesPage';\n\nexport const App = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.main}>\n      <Routes>\n        <Route index element={<ReleasesPage />} />\n        <Route path={':releaseId'} element={<ReleaseDetailsPage />} />\n      </Routes>\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": ["StyledPopoverFlex", "styled", "Flex", "theme", "colors", "neutral150", "EntryStatusTrigger", "action", "status", "hasErrors", "requiredStage", "entryStage", "formatMessage", "useIntl", "id", "_jsx", "Popover", "Trigger", "Button", "variant", "startIcon", "CrossCircle", "fill", "endIcon", "CaretDown", "Typography", "textColor", "fontWeight", "defaultMessage", "CheckCircle", "ArrowsCounterClockwise", "FieldsValidation", "errors", "kind", "contentTypeUid", "documentId", "locale", "_jsxs", "direction", "gap", "width", "padding", "Object", "keys", "length", "LinkButton", "tag", "Link", "to", "pathname", "search", "stringify", "plugins", "i18n", "fullWidth", "state", "forceValidation", "getReviewStageIcon", "contentTypeHasReviewWorkflow", "getReviewStageMessage", "stageName", "name", "ReviewStageValidation", "Icon", "EntryValidationPopover", "schema", "entry", "validate", "isLoading", "unstable_useDocument", "collectionType", "model", "uid", "skip", "hasReviewWorkflow", "stageRequiredToPublish", "strapi_stage", "Root", "Content", "intervals", "RelativeTime", "forwardRef", "timestamp", "customIntervals", "restProps", "forwardedRef", "formatRelativeTime", "formatDate", "formatTime", "useIntl", "interval", "intervalToDuration", "start", "end", "Date", "now", "unit", "find", "intervalUnit", "Object", "keys", "includes", "relativeTime", "isPast", "customInterval", "custom", "threshold", "displayText", "text", "numeric", "_jsx", "time", "ref", "dateTime", "toISOString", "role", "title", "ReleaseModal", "handleClose", "open", "handleSubmit", "initialValues", "isLoading", "formatMessage", "useIntl", "pathname", "useLocation", "isCreatingRelease", "pluginId", "timezoneList", "systemTimezone", "value", "getTimezones", "scheduledAt", "Date", "getScheduledTimestamp", "values", "date", "time", "timezone", "timezoneWithoutOffset", "split", "zonedTimeToUtc", "getTimezoneWithOffset", "currentTimezone", "find", "_jsx", "Modal", "Root", "onOpenChange", "_jsxs", "Content", "Header", "Title", "id", "defaultMessage", "Formik", "onSubmit", "isScheduled", "validationSchema", "RELEASE_SCHEMA", "validateOnChange", "errors", "handleChange", "setFieldValue", "Form", "Body", "Flex", "direction", "alignItems", "gap", "Field", "name", "error", "required", "Label", "TextInput", "onChange", "Error", "Box", "width", "Checkbox", "checked", "onCheckedChange", "Typography", "textColor", "fontWeight", "_Fragment", "DatePicker", "isoFormatDate", "formatISO", "representation", "clearLabel", "onClear", "minDate", "utcToZonedTime", "TimePicker", "undefined", "TimezoneComponent", "timezoneOptions", "Footer", "Close", "Button", "variant", "loading", "type", "useFormikContext", "setTimezoneList", "useState", "React", "useEffect", "updatedTimezone", "tz", "Combobox", "autocomplete", "filter", "textValue", "replace", "onTextValueChange", "map", "ComboboxOption", "useTypedDispatch", "useDispatch", "isBaseQueryError", "error", "name", "undefined", "LinkCard", "styled", "Link", "RelativeTime", "BaseRelativeTime", "getBadgeProps", "status", "color", "textColor", "backgroundColor", "borderColor", "ReleasesGrid", "sectionTitle", "releases", "isError", "formatMessage", "useIntl", "_jsx", "Page", "Error", "length", "EmptyStateLayout", "content", "id", "defaultMessage", "target", "icon", "EmptyDocuments", "width", "Grid", "Root", "gap", "map", "name", "scheduledAt", "Item", "col", "s", "xs", "direction", "alignItems", "tag", "NavLink", "to", "isExternal", "_jsxs", "Flex", "justifyContent", "padding", "hasRadius", "background", "shadow", "height", "Typography", "variant", "fontWeight", "timestamp", "Date", "Badge", "StyledAlert", "Alert", "INITIAL_FORM_VALUES", "date", "format", "time", "isScheduled", "timezone", "ReleasesPage", "location", "useLocation", "releaseModalShown", "setReleaseModalShown", "useState", "toggleNotification", "useNotification", "navigate", "useNavigate", "formatAPIError", "useAPIErrorHandler", "query", "setQuery", "useQueryParams", "response", "useGetReleasesQuery", "data", "isLoading", "isLoadingSettings", "useGetReleaseSettingsQuery", "createRelease", "isSubmittingForm", "useCreateReleaseMutation", "getFeature", "useLicenseLimits", "maximumReleases", "trackUsage", "useTracking", "allowedActions", "canCreate", "useRBAC", "PERMISSIONS", "isLoadingReleases", "isSuccess", "activeTab", "currentData", "meta", "React", "useEffect", "state", "errors", "type", "title", "message", "replace", "toggleAddReleaseModal", "prev", "Loading", "totalPendingReleases", "pendingReleasesCount", "hasReachedMaximumPendingReleases", "handleTabChange", "tabValue", "page", "pageSize", "pagination", "filters", "releasedAt", "$notNull", "handleAddRelease", "toString", "isFetchError", "error", "Main", "aria-busy", "Layouts", "Header", "secondaryAction", "GradientBadge", "label", "subtitle", "primaryAction", "Button", "startIcon", "Plus", "onClick", "disabled", "Content", "_Fragment", "marginBottom", "action", "href", "number", "onClose", "closeLabel", "Tabs", "onValueChange", "value", "Box", "paddingBottom", "List", "aria-label", "Trigger", "count", "Divider", "Pagination", "defaultPageSize", "PageSize", "options", "Links", "ReleaseModal", "open", "handleClose", "handleSubmit", "initialValues", "defaultTimezone", "split", "ReleaseInfoWrapper", "styled", "Flex", "theme", "borderRadius", "colors", "neutral150", "ReleaseDetailsLayout", "toggleEditReleaseModal", "toggleWarningSubmit", "children", "formatMessage", "formatDate", "formatTime", "useIntl", "releaseId", "useParams", "data", "isLoading", "isLoadingDetails", "error", "useGetReleaseQuery", "id", "skip", "publishRelease", "isPublishing", "usePublishReleaseMutation", "toggleNotification", "useNotification", "formatAPIError", "useAPIErrorHandler", "allowedActions", "useRBAC", "PERMISSIONS", "canUpdate", "canDelete", "canPublish", "dispatch", "useTypedDispatch", "trackUsage", "useTracking", "release", "handlePublishRelease", "response", "type", "message", "defaultMessage", "totalEntries", "totalPublishedEntries", "totalUnpublishedEntries", "meta", "isFetchError", "handleRefresh", "releaseApi", "util", "invalidateTags", "getCreatedByUser", "createdBy", "username", "firstname", "lastname", "trim", "email", "_jsx", "Page", "Loading", "Navigate", "to", "state", "errors", "code", "actions", "count", "hasCreatedByUser", "Boolean", "isScheduled", "scheduledAt", "timezone", "numberOfEntriesText", "number", "scheduledText", "date", "Date", "weekday", "day", "month", "year", "timeZone", "time", "hourCycle", "offset", "getTimezoneOffset", "_jsxs", "Main", "aria-busy", "Layouts", "Header", "title", "name", "subtitle", "gap", "lineHeight", "Typography", "textColor", "variant", "Badge", "getBadgeProps", "status", "navigationAction", "BackButton", "fallback", "primaryAction", "releasedAt", "SimpleMenuButton", "label", "More", "endIcon", "paddingLeft", "paddingRight", "aria-label", "popoverPlacement", "Menu", "Item", "disabled", "onSelect", "startIcon", "Pencil", "Trash", "direction", "justifyContent", "alignItems", "padding", "fontWeight", "color", "RelativeTime", "timestamp", "createdAt", "Button", "size", "onClick", "toString", "loading", "SimpleMenu", "GROUP_BY_OPTIONS", "GROUP_BY_OPTIONS_NO_LOCALE", "getGroupByOptionLabel", "value", "ReleaseDetailsBody", "query", "setQuery", "useQueryParams", "releaseData", "isReleaseLoading", "releaseError", "runHookWaterfall", "useStrapiApp", "displayedHeaders", "hasI18nEnabled", "selectedGroupBy", "groupBy", "isFetching", "isError", "releaseActionsError", "useGetReleaseActionsQuery", "updateReleaseAction", "useUpdateReleaseActionMutation", "handleChangeType", "e", "actionId", "actionPath", "params", "body", "target", "releaseActions", "releaseMeta", "contentTypes", "components", "isBaseQueryError", "errorsArray", "push", "Error", "Object", "keys", "length", "Content", "EmptyStateLayout", "action", "LinkButton", "tag", "ReactRouterLink", "pathname", "style", "textDecoration", "icon", "EmptyDocuments", "width", "content", "groupByLabel", "headers", "options", "SingleSelect", "placeholder", "customizeContent", "onChange", "map", "option", "SingleSelectOption", "key", "role", "Table", "Root", "rows", "item", "Number", "entry", "Head", "HeaderCell", "Body", "contentType", "locale", "actionIndex", "Tr", "Td", "maxWidth", "ellipsis", "mainFieldValue", "displayName", "isPublish", "b", "ReleaseActionOptions", "selected", "handleChange", "_Fragment", "minWidth", "EntryValidationPopover", "schema", "uid", "ReleaseActionMenu", "ReleaseActionEntryLinkItem", "contentTypeUid", "documentId", "DeleteReleaseActionItem", "Pagination", "pagination", "defaultPageSize", "pageSize", "PageSize", "Links", "ReleaseDetailsPage", "navigate", "useNavigate", "releaseModalShown", "setReleaseModalShown", "useState", "showWarningSubmit", "setWarningSubmit", "isSuccess", "isSuccessDetails", "dataTimezone", "isLoadingTimezone", "useGetReleaseSettingsQuery", "updateRelease", "isSubmittingForm", "useUpdateReleaseMutation", "deleteRelease", "useDeleteReleaseMutation", "prev", "getTimezoneValue", "defaultTimezone", "prevState", "utcToZonedTime", "format", "undefined", "handleEditRelease", "values", "handleDeleteRelease", "ReleaseModal", "open", "handleClose", "handleSubmit", "initialValues", "Dialog", "onOpenChange", "ConfirmDialog", "onConfirm", "App", "_jsx", "Page", "Protect", "permissions", "PERMISSIONS", "main", "_jsxs", "Routes", "Route", "index", "element", "ReleasesPage", "path", "ReleaseDetailsPage"]
}
