{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/services/homepage.ts", "../../../@strapi/content-manager/admin/src/components/Widgets.tsx"],
  "sourcesContent": ["import * as Homepage from '../../../shared/contracts/homepage';\n\nimport { contentManagerApi } from './api';\n\nconst homepageService = contentManagerApi\n  .enhanceEndpoints({\n    addTagTypes: ['RecentDocumentList'],\n  })\n  .injectEndpoints({\n    /**\n     * TODO: Remove overrideExisting when we remove the future flag\n     * and delete the old homepage service in the admin\n     */\n    overrideExisting: true,\n    endpoints: (builder) => ({\n      getRecentDocuments: builder.query<\n        Homepage.GetRecentDocuments.Response['data'],\n        Homepage.GetRecentDocuments.Request['query']\n      >({\n        query: (params) => `/content-manager/homepage/recent-documents?action=${params.action}`,\n        transformResponse: (response: Homepage.GetRecentDocuments.Response) => response.data,\n        providesTags: (res, _err, { action }) => [\n          { type: 'RecentDocumentList' as const, id: action },\n        ],\n      }),\n    }),\n  });\n\nconst { useGetRecentDocumentsQuery } = homepageService;\n\nexport { useGetRecentDocumentsQuery };\n", "import { Widget, useTracking } from '@strapi/admin/strapi-admin';\nimport { Box, IconButton, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { DocumentStatus } from '../pages/EditView/components/DocumentStatus';\nimport { useGetRecentDocumentsQuery } from '../services/homepage';\n\nimport { RelativeTime } from './RelativeTime';\n\nimport type { RecentDocument } from '../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography).attrs({ maxWidth: '14.4rem', display: 'block' })`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst RecentDocumentsTable = ({ documents }: { documents: RecentDocument[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome');\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nexport { LastEditedWidget, LastPublishedWidget };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAMA,kBAAkBC,kBACrBC,iBAAiB;EAChBC,aAAa;IAAC;EAAqB;AACrC,CAAA,EACCC,gBAAgB;;;;;EAKfC,kBAAkB;EAClBC,WAAW,CAACC,aAAa;IACvBC,oBAAoBD,QAAQE,MAG1B;MACAA,OAAO,CAACC,WAAW,qDAAqDA,OAAOC,MAAM;MACrFC,mBAAmB,CAACC,aAAmDA,SAASC;MAChFC,cAAc,CAACC,KAAKC,MAAM,EAAEN,OAAM,MAAO;QACvC;UAAEO,MAAM;UAA+BC,IAAIR;QAAO;MACnD;IACH,CAAA;;AAEJ,CAAA;AAEI,IAAA,EAAES,2BAA0B,IAAKpB;;;ACdvC,IAAMqB,iBAAiBC,GAAOC,UAAYC,EAAAA,MAAM;EAAEC,UAAU;EAAWC,SAAS;AAAQ,CAAA;;;;;AAMxF,IAAMC,uBAAuB,CAAC,EAAEC,UAAS,MAAmC;AAC1E,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AACvB,QAAMC,WAAWC,YAAAA;AAEjB,QAAMC,kBAAkB,CAACC,aAAAA;AACvB,UAAMC,eAAeD,SAASE,SAAS;AACvC,UAAMC,WAAWF,eAAe,iBAAiB;AACjD,UAAMG,cAAcJ,SAASK,SAAS,0BAA0BL,SAASK,MAAM,KAAK;AAEpF,WAAO,oBAAoBF,QAAAA,IAAYH,SAASM,cAAc,GAAGL,eAAe,KAAK,MAAMD,SAASO,UAAU,GAAGH,WAAAA;EACnH;AAEA,QAAMI,iBAAiB,CAACR,aAA6B,MAAA;AACnDL,eAAW,uBAAA;AACX,UAAMc,OAAOV,gBAAgBC,QAAAA;AAC7BH,aAASY,IAAAA;EACX;AAEA,aACEC,wBAACC,OAAAA;IAAMC,UAAU;IAAGC,WAAUrB,uCAAWsB,WAAU;IACjD,cAAAJ,wBAACK,OAAAA;gBACEvB,uCAAWwB,IAAI,CAAChB,iBACfiB,yBAACC,IAAAA;QAAGC,SAASX,eAAeR,QAAAA;QAAWoB,QAAO;;cAC5CV,wBAACW,IAAAA;YACC,cAAAX,wBAACzB,gBAAAA;cAAeqC,OAAOtB,SAASsB;cAAOC,SAAQ;cAAQC,WAAU;cAC9DxB,UAAAA,SAASsB;;;cAGdZ,wBAACW,IAAAA;YACC,cAAAX,wBAACzB,gBAAAA;cAAesC,SAAQ;cAAQC,WAAU;wBACvCxB,SAASE,SAAS,eACfT,cAAc;gBACZgC,IAAI;gBACJC,gBAAgB;cAClB,CAAA,IACAjC,cAAc;gBACZgC,IAAIzB,SAAS2B;gBACbD,gBAAgB1B,SAAS2B;cAC3B,CAAA;;;cAGRjB,wBAACW,IAAAA;YACC,cAAAX,wBAACkB,KAAAA;cAAItC,SAAQ;wBACVU,SAAS6B,aACRnB,wBAACoB,gBAAAA;gBAAeD,QAAQ7B,SAAS6B;uBAEjCnB,wBAACvB,YAAAA;gBAAWqC,WAAU;gBAAaO,eAAW;gBAAC,UAAA;;;;cAMrDrB,wBAACW,IAAAA;YACC,cAAAX,wBAACvB,YAAAA;cAAWqC,WAAU;cACpB,cAAAd,wBAACsB,cAAAA;gBAAaC,WAAW,IAAIC,KAAKlC,SAASmC,SAAS;;;;cAGxDzB,wBAACW,IAAAA;YAAGF,SAAS,CAACiB,MAAMA,EAAEC,gBAAe;YACnC,cAAA3B,wBAACkB,KAAAA;cAAItC,SAAQ;cACX,cAAAoB,wBAAC4B,YAAAA;gBACCC,KAAKC;gBACLC,IAAI1C,gBAAgBC,QAAAA;gBACpBmB,SAAS,MAAMxB,WAAW,uBAAA;gBAC1B+C,OAAOjD,cAAc;kBACnBgC,IAAI;kBACJC,gBAAgB;gBAClB,CAAA;gBACAH,SAAQ;gBAER,cAAAb,wBAACiC,eAAAA,CAAAA,CAAAA;;;;;MA/CoD3C,GAAAA,SAASO,UAAU;;;AAwD1F;AAIkG,IAE5FqC,mBAAmB,MAAA;AACvB,QAAM,EAAEnD,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEmD,MAAMC,WAAWC,MAAK,IAAKC,2BAA2B;IAAEC,QAAQ;EAAS,CAAA;AAEjF,MAAIH,WAAW;AACb,eAAOpC,wBAACwC,OAAOC,SAAO,CAAA,CAAA;EACxB;AAEA,MAAIJ,SAAS,CAACF,MAAM;AAClB,eAAOnC,wBAACwC,OAAOE,OAAK,CAAA,CAAA;EACtB;AAEA,MAAIP,KAAK/B,WAAW,GAAG;AACrB,eACEJ,wBAACwC,OAAOG,QAAM;gBACX5D,cAAc;QACbgC,IAAI;QACJC,gBAAgB;MAClB,CAAA;;EAGN;AAEA,aAAOhB,wBAACnB,sBAAAA;IAAqBC,WAAWqD;;AAC1C;AAIkG,IAE5FS,sBAAsB,MAAA;AAC1B,QAAM,EAAE7D,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEmD,MAAMC,WAAWC,MAAK,IAAKC,2BAA2B;IAAEC,QAAQ;EAAU,CAAA;AAElF,MAAIH,WAAW;AACb,eAAOpC,wBAACwC,OAAOC,SAAO,CAAA,CAAA;EACxB;AAEA,MAAIJ,SAAS,CAACF,MAAM;AAClB,eAAOnC,wBAACwC,OAAOE,OAAK,CAAA,CAAA;EACtB;AAEA,MAAIP,KAAK/B,WAAW,GAAG;AACrB,eACEJ,wBAACwC,OAAOG,QAAM;gBACX5D,cAAc;QACbgC,IAAI;QACJC,gBAAgB;MAClB,CAAA;;EAGN;AAEA,aAAOhB,wBAACnB,sBAAAA;IAAqBC,WAAWqD;;AAC1C;",
  "names": ["homepageService", "contentManagerApi", "enhanceEndpoints", "addTagTypes", "injectEndpoints", "overrideExisting", "endpoints", "builder", "getRecentDocuments", "query", "params", "action", "transformResponse", "response", "data", "providesTags", "res", "_err", "type", "id", "useGetRecentDocumentsQuery", "CellTypography", "styled", "Typography", "attrs", "maxWidth", "display", "RecentDocumentsTable", "documents", "formatMessage", "useIntl", "trackUsage", "useTracking", "navigate", "useNavigate", "getEditViewLink", "document", "isSingleType", "kind", "kindPath", "queryParams", "locale", "contentTypeUid", "documentId", "handleRowClick", "link", "_jsx", "Table", "colCount", "rowCount", "length", "Tbody", "map", "_jsxs", "Tr", "onClick", "cursor", "Td", "title", "variant", "textColor", "id", "defaultMessage", "contentTypeDisplayName", "Box", "status", "DocumentStatus", "aria-hidden", "RelativeTime", "timestamp", "Date", "updatedAt", "e", "stopPropagation", "IconButton", "tag", "Link", "to", "label", "Pencil", "LastEditedWidget", "data", "isLoading", "error", "useGetRecentDocumentsQuery", "action", "Widget", "Loading", "Error", "NoData", "LastPublishedWidget"]
}
