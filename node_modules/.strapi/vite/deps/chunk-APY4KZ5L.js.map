{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/hooks/usePersistentState.ts", "../../../@strapi/admin/admin/src/components/UnstableGuidedTour/Context.tsx", "../../../@strapi/admin/admin/src/components/UnstableGuidedTour/Step.tsx", "../../../@strapi/admin/admin/src/components/UnstableGuidedTour/Tours.tsx"],
  "sourcesContent": ["import { useEffect, useState } from 'react';\n\nconst usePersistentState = <T>(key: string, defaultValue: T) => {\n  const [value, setValue] = useState<T>(() => {\n    const stickyValue = window.localStorage.getItem(key);\n\n    if (stickyValue !== null) {\n      try {\n        return JSON.parse(stickyValue);\n      } catch {\n        // JSON.parse fails when the stored value is a primitive\n        return stickyValue;\n      }\n    }\n\n    return defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue] as const;\n};\n\nexport { usePersistentState };\n", "import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { GetGuidedTourMeta } from '../../../../shared/contracts/admin';\nimport { usePersistentState } from '../../hooks/usePersistentState';\nimport { createContext } from '../Context';\n\nimport { type Tours, tours as guidedTours } from './Tours';\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype ValidTourName = keyof Tours;\n\nexport type ExtendedCompletedActions = (\n  | GetGuidedTourMeta.Response['data']['completedActions'][number]\n  | 'didCopyApiToken'\n)[];\n\ntype Action =\n  | {\n      type: 'next_step';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'skip_tour';\n      payload: ValidTourName;\n    }\n  | {\n      type: 'set_completed_actions';\n      payload: ExtendedCompletedActions;\n    }\n  | {\n      type: 'skip_all_tours';\n    };\n\ntype Tour = Record<ValidTourName, { currentStep: number; length: number; isCompleted: boolean }>;\ntype State = {\n  tours: Tour;\n  enabled: boolean;\n  completedActions: ExtendedCompletedActions;\n};\n\nconst [GuidedTourProviderImpl, unstableUseGuidedTour] = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>('UnstableGuidedTour');\n\nfunction reducer(state: State, action: Action): State {\n  return produce(state, (draft) => {\n    if (action.type === 'next_step') {\n      const nextStep = draft.tours[action.payload].currentStep + 1;\n      draft.tours[action.payload].currentStep = nextStep;\n      draft.tours[action.payload].isCompleted = nextStep === draft.tours[action.payload].length;\n    }\n\n    if (action.type === 'skip_tour') {\n      draft.tours[action.payload].isCompleted = true;\n    }\n\n    if (action.type === 'set_completed_actions') {\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\n    }\n\n    if (action.type === 'skip_all_tours') {\n      draft.enabled = false;\n    }\n  });\n}\n\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\n\nconst UnstableGuidedTourContext = ({\n  children,\n  enabled = true,\n}: {\n  children: React.ReactNode;\n  enabled?: boolean;\n}) => {\n  const initialTourState = Object.keys(guidedTours).reduce((acc, tourName) => {\n    const tourLength = Object.keys(guidedTours[tourName as ValidTourName]).length;\n    acc[tourName as ValidTourName] = {\n      currentStep: 0,\n      length: tourLength,\n      isCompleted: false,\n    };\n\n    return acc;\n  }, {} as Tour);\n\n  const [tours, setTours] = usePersistentState<State>(STORAGE_KEY, {\n    tours: initialTourState,\n    enabled,\n    completedActions: [],\n  });\n  const [state, dispatch] = React.useReducer(reducer, tours);\n\n  // Sync local storage\n  React.useEffect(() => {\n    if (window.strapi.future.isEnabled('unstableGuidedTour')) {\n      setTours(state);\n    }\n  }, [state, setTours]);\n\n  return (\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\n      {children}\n    </GuidedTourProviderImpl>\n  );\n};\n\nexport type { Action, State, ValidTourName };\nexport { UnstableGuidedTourContext, unstableUseGuidedTour, reducer };\n", "import * as React from 'react';\n\nimport { Popover, Box, Flex, Button, Typography, LinkButton } from '@strapi/design-system';\nimport { FormattedMessage, type MessageDescriptor } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { unstableUseGuidedTour, ValidTourName } from './Context';\n\n/* -------------------------------------------------------------------------------------------------\n * Step factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype WithChildren = {\n  children: React.ReactNode;\n  id?: never;\n  defaultMessage?: never;\n};\n\ntype WithIntl = {\n  children?: undefined;\n  id: MessageDescriptor['id'];\n  defaultMessage: MessageDescriptor['defaultMessage'];\n};\n\ntype WithActionsChildren = {\n  children: React.ReactNode;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n};\n\ntype WithActionsProps = {\n  children?: undefined;\n  showStepCount?: boolean;\n  showSkip?: boolean;\n};\n\ntype StepProps = WithChildren | WithIntl;\ntype ActionsProps = WithActionsChildren | WithActionsProps;\n\ntype Step = {\n  Root: React.ForwardRefExoticComponent<React.ComponentProps<typeof Popover.Content>>;\n  Title: (props: StepProps) => React.ReactNode;\n  Content: (props: StepProps) => React.ReactNode;\n  Actions: (props: ActionsProps & { to?: string }) => React.ReactNode;\n};\n\nconst ActionsContainer = styled(Flex)`\n  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};\n`;\n\nconst createStepComponents = (tourName: ValidTourName): Step => ({\n  Root: React.forwardRef((props, ref) => (\n    <Popover.Content ref={ref} side=\"top\" align=\"center\" style={{ border: 'none' }} {...props}>\n      <Flex width=\"360px\" direction=\"column\" alignItems=\"start\">\n        {props.children}\n      </Flex>\n    </Popover.Content>\n  )),\n\n  Title: (props) => {\n    return (\n      <Box paddingTop={5} paddingLeft={5} paddingRight={5} paddingBottom={1} width=\"100%\">\n        {'children' in props ? (\n          props.children\n        ) : (\n          <Typography tag=\"div\" variant=\"omega\" fontWeight=\"bold\">\n            <FormattedMessage tagName=\"h1\" id={props.id} defaultMessage={props.defaultMessage} />\n          </Typography>\n        )}\n      </Box>\n    );\n  },\n\n  Content: (props) => (\n    <Box paddingBottom={5} paddingLeft={5} paddingRight={5} width=\"100%\">\n      {'children' in props ? (\n        props.children\n      ) : (\n        <Typography tag=\"div\" variant=\"omega\">\n          <FormattedMessage tagName=\"p\" id={props.id} defaultMessage={props.defaultMessage} />\n        </Typography>\n      )}\n    </Box>\n  ),\n\n  Actions: ({ showStepCount = true, showSkip = false, to, ...props }) => {\n    const dispatch = unstableUseGuidedTour('GuidedTourPopover', (s) => s.dispatch);\n    const state = unstableUseGuidedTour('GuidedTourPopover', (s) => s.state);\n    const currentStep = state.tours[tourName].currentStep + 1;\n    // TODO: Currently all tours do not count their last step, but we should find a way to make this more smart\n    const displayedLength = state.tours[tourName].length - 1;\n\n    return (\n      <ActionsContainer width=\"100%\" padding={3} paddingLeft={5}>\n        {'children' in props ? (\n          props.children\n        ) : (\n          <Flex flex={1} justifyContent={showStepCount ? 'space-between' : 'flex-end'}>\n            {showStepCount && (\n              <Typography variant=\"omega\" fontSize=\"12px\">\n                <FormattedMessage\n                  id=\"tours.stepCount\"\n                  defaultMessage=\"Step {currentStep} of {tourLength}\"\n                  values={{ currentStep, tourLength: displayedLength }}\n                />\n              </Typography>\n            )}\n            <Flex gap={2}>\n              {showSkip && (\n                <Button\n                  variant=\"tertiary\"\n                  onClick={() => dispatch({ type: 'skip_tour', payload: tourName })}\n                >\n                  <FormattedMessage id=\"tours.skip\" defaultMessage=\"Skip\" />\n                </Button>\n              )}\n              {to ? (\n                <LinkButton\n                  tag={NavLink}\n                  to={to}\n                  onClick={() => dispatch({ type: 'next_step', payload: tourName })}\n                >\n                  <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n                </LinkButton>\n              ) : (\n                <Button onClick={() => dispatch({ type: 'next_step', payload: tourName })}>\n                  <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\n                </Button>\n              )}\n            </Flex>\n          </Flex>\n        )}\n      </ActionsContainer>\n    );\n  },\n});\n\nexport type { Step };\nexport { createStepComponents };\n", "import * as React from 'react';\n\nimport { Box, Popover, Portal, Flex, LinkButton } from '@strapi/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useGetGuidedTourMetaQuery } from '../../services/admin';\n\nimport {\n  type State,\n  type Action,\n  unstableUseGuidedTour,\n  ValidTourName,\n  ExtendedCompletedActions,\n} from './Context';\nimport { Step, createStepComponents } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Tours\n * -----------------------------------------------------------------------------------------------*/\n\nconst tours = {\n  contentTypeBuilder: createTour('contentTypeBuilder', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root side=\"bottom\">\n          <Step.Title\n            id=\"tours.contentTypeBuilder.Introduction.title\"\n            defaultMessage=\"Content-Type Builder\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Introduction.content\"\n            defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CollectionTypes',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={26}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n            defaultMessage=\"Collection Types\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n            defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'SingleTypes',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={26}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.SingleTypes.title\"\n            defaultMessage=\"Single Types\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.SingleTypes.content\"\n            defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Components',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={26}>\n          <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Components.content\"\n            defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={32}>\n          <Step.Title\n            id=\"tours.contentTypeBuilder.Finish.title\"\n            defaultMessage=\"It’s time to create content!\"\n          />\n          <Step.Content\n            id=\"tours.contentTypeBuilder.Finish.content\"\n            defaultMessage=\"Now that you created content types, you’ll be able to create content in the content manager.\"\n          />\n          <Step.Actions showStepCount={false} to=\"/content-manager\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateContentTypeSchema'),\n    },\n  ]),\n  contentManager: createTour('contentManager', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root side=\"top\">\n          <Step.Title\n            id=\"tours.contentManager.Introduction.title\"\n            defaultMessage=\"Content manager\"\n          />\n          <Step.Content\n            id=\"tours.contentManager.Introduction.content\"\n            defaultMessage=\"Create and manage content from your collection types and single types.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Fields',\n      content: (Step) => (\n        <Step.Root side={'top'} align=\"start\" sideOffset={-36}>\n          <Step.Title id=\"tours.contentManager.Fields.title\" defaultMessage=\"Fields\" />\n          <Step.Content\n            id=\"tours.contentManager.Fields.content\"\n            defaultMessage=\"Add content to the fields created in the Content-Type Builder.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Publish',\n      content: (Step) => (\n        <Step.Root side=\"left\" align=\"center\" sideOffset={20}>\n          <Step.Title id=\"tours.contentManager.Publish.title\" defaultMessage=\"Publish\" />\n          <Step.Content\n            id=\"tours.contentManager.Publish.content\"\n            defaultMessage=\"Publish entries to make their content available through the Document Service API.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => (\n        <Step.Root side=\"right\" sideOffset={32}>\n          <Step.Title\n            id=\"tours.contentManager.FinalStep.title\"\n            defaultMessage=\"It’s time to create API Tokens!\"\n          />\n          <Step.Content\n            id=\"tours.contentManager.FinalStep.content\"\n            defaultMessage=\"Now that you’ve created and published content, time to create API tokens and set up permissions.\"\n          />\n          <Step.Actions showStepCount={false} to=\"/settings/api-tokens\" />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateContent'),\n    },\n  ]),\n  apiTokens: createTour('apiTokens', [\n    {\n      name: 'Introduction',\n      content: (Step) => (\n        <Step.Root sideOffset={-36}>\n          <Step.Title id=\"tours.apiTokens.Introduction.title\" defaultMessage=\"API tokens\" />\n          <Step.Content\n            id=\"tours.apiTokens.Introduction.content\"\n            defaultMessage=\"Create and manage API tokens with highly customizable permissions.\"\n          />\n          <Step.Actions showSkip />\n        </Step.Root>\n      ),\n      when: (completedActions) => !completedActions.includes('didCreateApiToken'),\n    },\n    {\n      name: 'CreateAnAPIToken',\n      content: (Step) => (\n        <Step.Root side=\"bottom\" sideOffset={20} align=\"end\">\n          <Step.Title\n            id=\"tours.apiTokens.CreateAnAPIToken.title\"\n            defaultMessage=\"Create an API token\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.CreateAnAPIToken.content\"\n            defaultMessage=\"Create a new API token. Choose a name, duration and type.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n    },\n    {\n      name: 'CopyAPIToken',\n      content: (Step) => (\n        <Step.Root side=\"bottom\" align=\"start\">\n          <Step.Title\n            id=\"tours.apiTokens.CopyAPIToken.title\"\n            defaultMessage=\"Copy your new API token\"\n          />\n          <Step.Content\n            id=\"tours.apiTokens.CopyAPIToken.content\"\n            defaultMessage=\"Make sure to do it now, you won’t be able to see it again. You’ll need to generate a new one if you lose it.\"\n          />\n          <Step.Actions />\n        </Step.Root>\n      ),\n      when: (completedActions) => completedActions.includes('didCreateApiToken'),\n    },\n    {\n      name: 'Finish',\n      content: (Step) => {\n        const dispatch = unstableUseGuidedTour('GuidedTourPopover', (s) => s.dispatch);\n        return (\n          <Step.Root side=\"right\" align=\"start\" sideOffset={32}>\n            <Step.Title\n              id=\"tours.apiTokens.FinalStep.title\"\n              defaultMessage=\"It’s time to deploy your application!\"\n            />\n            <Step.Content\n              id=\"tours.apiTokens.FinalStep.content\"\n              defaultMessage=\"Your application is ready to be deployed and its content to be shared with the world!\"\n            />\n            <Step.Actions showStepCount={false}>\n              <Flex justifyContent=\"end\" width={'100%'}>\n                <LinkButton\n                  onClick={() => {\n                    dispatch({ type: 'next_step', payload: 'apiTokens' });\n                  }}\n                  tag={NavLink}\n                  to=\"/\"\n                >\n                  <FormattedMessage id=\"tours.gotIt\" defaultMessage=\"Got it\" />\n                </LinkButton>\n              </Flex>\n            </Step.Actions>\n          </Step.Root>\n        );\n      },\n      when: (completedActions) => completedActions.includes('didCopyApiToken'),\n    },\n  ]),\n  strapiCloud: createTour('strapiCloud', []),\n} as const;\n\ntype Tours = typeof tours;\n\n/* -------------------------------------------------------------------------------------------------\n * GuidedTourTooltip\n * -----------------------------------------------------------------------------------------------*/\n\ntype Content = (\n  Step: Step,\n  {\n    state,\n    dispatch,\n  }: {\n    state: State;\n    dispatch: React.Dispatch<Action>;\n  }\n) => React.ReactNode;\n\ntype GuidedTourTooltipProps = {\n  children: React.ReactNode;\n  content: Content;\n  tourName: ValidTourName;\n  step: number;\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\n};\n\nconst UnstableGuidedTourTooltip = ({ children, ...props }: GuidedTourTooltipProps) => {\n  const state = unstableUseGuidedTour('TooltipWrapper', (s) => s.state);\n  const hasFutureFlag = window.strapi.future.isEnabled('unstableGuidedTour');\n\n  if (!state.enabled) {\n    return <>{children}</>;\n  }\n\n  if (!hasFutureFlag) {\n    return <>{children}</>;\n  }\n\n  return <GuidedTourTooltipImpl {...props}>{children}</GuidedTourTooltipImpl>;\n};\n\nconst GuidedTourOverlay = styled(Box)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(50, 50, 77, 0.2);\n  z-index: 10;\n`;\n\nconst GuidedTourTooltipImpl = ({\n  children,\n  content,\n  tourName,\n  step,\n  when,\n}: GuidedTourTooltipProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n\n  const state = unstableUseGuidedTour('UnstableGuidedTourTooltip', (s) => s.state);\n  const dispatch = unstableUseGuidedTour('UnstableGuidedTourTooltip', (s) => s.dispatch);\n\n  const isCurrentStep = state.tours[tourName].currentStep === step;\n  const isStepConditionMet = when ? when(state.completedActions) : true;\n  const isPopoverOpen =\n    guidedTourMeta?.data?.isFirstSuperAdminUser &&\n    !state.tours[tourName].isCompleted &&\n    isCurrentStep &&\n    isStepConditionMet;\n\n  // Lock the scroll\n  React.useEffect(() => {\n    if (!isPopoverOpen) return;\n\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, [isPopoverOpen]);\n\n  // TODO: This isn't great but the only solution for syncing the completed actions\n  React.useEffect(() => {\n    dispatch({\n      type: 'set_completed_actions',\n      payload: guidedTourMeta?.data?.completedActions ?? [],\n    });\n  }, [dispatch, guidedTourMeta?.data?.completedActions]);\n\n  const Step = React.useMemo(() => createStepComponents(tourName), [tourName]);\n\n  return (\n    <>\n      {isPopoverOpen && (\n        <Portal>\n          <GuidedTourOverlay />\n        </Portal>\n      )}\n      <Popover.Root open={isPopoverOpen}>\n        <Popover.Anchor>{children}</Popover.Anchor>\n        {content(Step, { state, dispatch })}\n      </Popover.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Tour factory\n * -----------------------------------------------------------------------------------------------*/\n\ntype TourStep<P extends string> = {\n  name: P;\n  content: Content;\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\n};\n\nfunction createTour<const T extends ReadonlyArray<TourStep<string>>>(tourName: string, steps: T) {\n  type Components = {\n    [K in T[number]['name']]: React.ComponentType<{ children: React.ReactNode }>;\n  };\n\n  const tour = steps.reduce((acc, step, index) => {\n    if (step.name in acc) {\n      throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);\n    }\n\n    acc[step.name as keyof Components] = ({ children }: { children: React.ReactNode }) => {\n      return (\n        <UnstableGuidedTourTooltip\n          tourName={tourName as ValidTourName}\n          step={index}\n          content={step.content}\n          when={step.when}\n        >\n          {children}\n        </UnstableGuidedTourTooltip>\n      );\n    };\n\n    return acc;\n  }, {} as Components);\n\n  return tour;\n}\n\nexport type { Content, Tours };\nexport { tours };\n"],
  "mappings": "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",
  "names": ["usePersistentState", "key", "defaultValue", "value", "setValue", "useState", "stickyValue", "window", "localStorage", "getItem", "JSON", "parse", "useEffect", "setItem", "stringify", "GuidedTourProviderImpl", "unstableUseGuidedTour", "createContext", "reducer", "state", "action", "produce", "draft", "type", "nextStep", "tours", "payload", "currentStep", "isCompleted", "length", "completedActions", "Set", "enabled", "STORAGE_KEY", "UnstableGuidedTourContext", "children", "initialTourState", "Object", "keys", "guidedTours", "reduce", "acc", "tourName", "tourLength", "setTours", "usePersistentState", "dispatch", "useReducer", "React", "useEffect", "window", "strapi", "future", "isEnabled", "_jsx", "ActionsContainer", "styled", "Flex", "theme", "colors", "neutral150", "createStepComponents", "tourName", "Root", "forwardRef", "props", "ref", "_jsx", "Popover", "Content", "side", "align", "style", "border", "width", "direction", "alignItems", "children", "Title", "Box", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "Typography", "tag", "variant", "fontWeight", "FormattedMessage", "tagName", "id", "defaultMessage", "Actions", "showStepCount", "showSkip", "to", "dispatch", "unstableUseGuidedTour", "s", "state", "currentStep", "tours", "displayedLength", "length", "padding", "_jsxs", "flex", "justifyContent", "fontSize", "values", "tourLength", "gap", "Button", "onClick", "type", "payload", "LinkButton", "NavLink", "tours", "contentTypeBuilder", "createTour", "name", "content", "Step", "_jsxs", "Root", "side", "_jsx", "Title", "id", "defaultMessage", "Content", "Actions", "showSkip", "sideOffset", "showStepCount", "to", "when", "completedActions", "includes", "contentManager", "align", "apiTokens", "dispatch", "unstableUseGuidedTour", "s", "Flex", "justifyContent", "width", "LinkButton", "onClick", "type", "payload", "tag", "NavLink", "FormattedMessage", "strapiCloud", "UnstableGuidedTourTooltip", "children", "props", "state", "hasFutureFlag", "window", "strapi", "future", "isEnabled", "enabled", "_Fragment", "GuidedTourTooltipImpl", "GuidedTourOverlay", "styled", "Box", "tourName", "step", "data", "guidedTourMeta", "useGetGuidedTourMetaQuery", "isCurrentStep", "currentStep", "isStepConditionMet", "isPopoverOpen", "isFirstSuperAdminUser", "isCompleted", "React", "useEffect", "originalStyle", "getComputedStyle", "document", "body", "overflow", "style", "useMemo", "createStepComponents", "Portal", "Popover", "open", "Anchor", "steps", "tour", "reduce", "acc", "index", "Error"]
}
