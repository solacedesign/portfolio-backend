import {
  useGetGuidedTourMetaQuery
} from "./chunk-L3WQFZOD.js";
import {
  createContext
} from "./chunk-BLJUR3JO.js";
import {
  fn
} from "./chunk-QOUV5O5E.js";
import {
  Box,
  Button,
  Flex,
  LinkButton,
  Popover,
  Portal$1,
  Typography,
  message_default
} from "./chunk-Y6YT4U2T.js";
import {
  NavLink
} from "./chunk-S65ZWNEO.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/admin/src/components/UnstableGuidedTour/Tours.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var React3 = __toESM(require_react(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/components/UnstableGuidedTour/Context.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/usePersistentState.mjs
var import_react = __toESM(require_react(), 1);
var usePersistentState = (key, defaultValue) => {
  const [value, setValue] = (0, import_react.useState)(() => {
    const stickyValue = window.localStorage.getItem(key);
    if (stickyValue !== null) {
      try {
        return JSON.parse(stickyValue);
      } catch {
        return stickyValue;
      }
    }
    return defaultValue;
  });
  (0, import_react.useEffect)(() => {
    window.localStorage.setItem(key, JSON.stringify(value));
  }, [
    key,
    value
  ]);
  return [
    value,
    setValue
  ];
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/UnstableGuidedTour/Context.mjs
var [GuidedTourProviderImpl, unstableUseGuidedTour] = createContext("UnstableGuidedTour");
function reducer(state, action) {
  return fn(state, (draft) => {
    if (action.type === "next_step") {
      const nextStep = draft.tours[action.payload].currentStep + 1;
      draft.tours[action.payload].currentStep = nextStep;
      draft.tours[action.payload].isCompleted = nextStep === draft.tours[action.payload].length;
    }
    if (action.type === "skip_tour") {
      draft.tours[action.payload].isCompleted = true;
    }
    if (action.type === "set_completed_actions") {
      draft.completedActions = [
        .../* @__PURE__ */ new Set([
          ...draft.completedActions,
          ...action.payload
        ])
      ];
    }
    if (action.type === "skip_all_tours") {
      draft.enabled = false;
    }
  });
}
var STORAGE_KEY = "STRAPI_GUIDED_TOUR";
var UnstableGuidedTourContext = ({ children, enabled = true }) => {
  const initialTourState = Object.keys(tours).reduce((acc, tourName) => {
    const tourLength = Object.keys(tours[tourName]).length;
    acc[tourName] = {
      currentStep: 0,
      length: tourLength,
      isCompleted: false
    };
    return acc;
  }, {});
  const [tours$1, setTours] = usePersistentState(STORAGE_KEY, {
    tours: initialTourState,
    enabled,
    completedActions: []
  });
  const [state, dispatch] = React.useReducer(reducer, tours$1);
  React.useEffect(() => {
    if (window.strapi.future.isEnabled("unstableGuidedTour")) {
      setTours(state);
    }
  }, [
    state,
    setTours
  ]);
  return (0, import_jsx_runtime.jsx)(GuidedTourProviderImpl, {
    state,
    dispatch,
    children
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/components/UnstableGuidedTour/Step.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var ActionsContainer = dt(Flex)`
  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};
`;
var createStepComponents = (tourName) => ({
  Root: React2.forwardRef((props, ref) => (0, import_jsx_runtime2.jsx)(Popover.Content, {
    ref,
    side: "top",
    align: "center",
    style: {
      border: "none"
    },
    ...props,
    children: (0, import_jsx_runtime2.jsx)(Flex, {
      width: "360px",
      direction: "column",
      alignItems: "start",
      children: props.children
    })
  })),
  Title: (props) => {
    return (0, import_jsx_runtime2.jsx)(Box, {
      paddingTop: 5,
      paddingLeft: 5,
      paddingRight: 5,
      paddingBottom: 1,
      width: "100%",
      children: "children" in props ? props.children : (0, import_jsx_runtime2.jsx)(Typography, {
        tag: "div",
        variant: "omega",
        fontWeight: "bold",
        children: (0, import_jsx_runtime2.jsx)(message_default, {
          tagName: "h1",
          id: props.id,
          defaultMessage: props.defaultMessage
        })
      })
    });
  },
  Content: (props) => (0, import_jsx_runtime2.jsx)(Box, {
    paddingBottom: 5,
    paddingLeft: 5,
    paddingRight: 5,
    width: "100%",
    children: "children" in props ? props.children : (0, import_jsx_runtime2.jsx)(Typography, {
      tag: "div",
      variant: "omega",
      children: (0, import_jsx_runtime2.jsx)(message_default, {
        tagName: "p",
        id: props.id,
        defaultMessage: props.defaultMessage
      })
    })
  }),
  Actions: ({ showStepCount = true, showSkip = false, to, ...props }) => {
    const dispatch = unstableUseGuidedTour("GuidedTourPopover", (s) => s.dispatch);
    const state = unstableUseGuidedTour("GuidedTourPopover", (s) => s.state);
    const currentStep = state.tours[tourName].currentStep + 1;
    const displayedLength = state.tours[tourName].length - 1;
    return (0, import_jsx_runtime2.jsx)(ActionsContainer, {
      width: "100%",
      padding: 3,
      paddingLeft: 5,
      children: "children" in props ? props.children : (0, import_jsx_runtime2.jsxs)(Flex, {
        flex: 1,
        justifyContent: showStepCount ? "space-between" : "flex-end",
        children: [
          showStepCount && (0, import_jsx_runtime2.jsx)(Typography, {
            variant: "omega",
            fontSize: "12px",
            children: (0, import_jsx_runtime2.jsx)(message_default, {
              id: "tours.stepCount",
              defaultMessage: "Step {currentStep} of {tourLength}",
              values: {
                currentStep,
                tourLength: displayedLength
              }
            })
          }),
          (0, import_jsx_runtime2.jsxs)(Flex, {
            gap: 2,
            children: [
              showSkip && (0, import_jsx_runtime2.jsx)(Button, {
                variant: "tertiary",
                onClick: () => dispatch({
                  type: "skip_tour",
                  payload: tourName
                }),
                children: (0, import_jsx_runtime2.jsx)(message_default, {
                  id: "tours.skip",
                  defaultMessage: "Skip"
                })
              }),
              to ? (0, import_jsx_runtime2.jsx)(LinkButton, {
                tag: NavLink,
                to,
                onClick: () => dispatch({
                  type: "next_step",
                  payload: tourName
                }),
                children: (0, import_jsx_runtime2.jsx)(message_default, {
                  id: "tours.next",
                  defaultMessage: "Next"
                })
              }) : (0, import_jsx_runtime2.jsx)(Button, {
                onClick: () => dispatch({
                  type: "next_step",
                  payload: tourName
                }),
                children: (0, import_jsx_runtime2.jsx)(message_default, {
                  id: "tours.next",
                  defaultMessage: "Next"
                })
              })
            ]
          })
        ]
      })
    });
  }
});

// node_modules/@strapi/admin/dist/admin/admin/src/components/UnstableGuidedTour/Tours.mjs
var tours = {
  contentTypeBuilder: createTour("contentTypeBuilder", [
    {
      name: "Introduction",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "bottom",
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentTypeBuilder.Introduction.title",
            defaultMessage: "Content-Type Builder"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentTypeBuilder.Introduction.content",
            defaultMessage: "Create and manage your content structure with collection types, single types and components."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {
            showSkip: true
          })
        ]
      })
    },
    {
      name: "CollectionTypes",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "right",
        sideOffset: 26,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentTypeBuilder.CollectionTypes.title",
            defaultMessage: "Collection Types"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentTypeBuilder.CollectionTypes.content",
            defaultMessage: "Create and manage your content structure with collection types, single types and components."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      })
    },
    {
      name: "SingleTypes",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "right",
        sideOffset: 26,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentTypeBuilder.SingleTypes.title",
            defaultMessage: "Single Types"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentTypeBuilder.SingleTypes.content",
            defaultMessage: "A content structure that can manage a single entry, such as a homepage or a header."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      })
    },
    {
      name: "Components",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "right",
        sideOffset: 26,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentTypeBuilder.Components.title",
            defaultMessage: "Components"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentTypeBuilder.Components.content",
            defaultMessage: "A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      })
    },
    {
      name: "Finish",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "right",
        sideOffset: 32,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentTypeBuilder.Finish.title",
            defaultMessage: "It’s time to create content!"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentTypeBuilder.Finish.content",
            defaultMessage: "Now that you created content types, you’ll be able to create content in the content manager."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {
            showStepCount: false,
            to: "/content-manager"
          })
        ]
      }),
      when: (completedActions) => completedActions.includes("didCreateContentTypeSchema")
    }
  ]),
  contentManager: createTour("contentManager", [
    {
      name: "Introduction",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "top",
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentManager.Introduction.title",
            defaultMessage: "Content manager"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentManager.Introduction.content",
            defaultMessage: "Create and manage content from your collection types and single types."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {
            showSkip: true
          })
        ]
      })
    },
    {
      name: "Fields",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "top",
        align: "start",
        sideOffset: -36,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentManager.Fields.title",
            defaultMessage: "Fields"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentManager.Fields.content",
            defaultMessage: "Add content to the fields created in the Content-Type Builder."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      })
    },
    {
      name: "Publish",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "left",
        align: "center",
        sideOffset: 20,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentManager.Publish.title",
            defaultMessage: "Publish"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentManager.Publish.content",
            defaultMessage: "Publish entries to make their content available through the Document Service API."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      })
    },
    {
      name: "Finish",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "right",
        sideOffset: 32,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.contentManager.FinalStep.title",
            defaultMessage: "It’s time to create API Tokens!"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.contentManager.FinalStep.content",
            defaultMessage: "Now that you’ve created and published content, time to create API tokens and set up permissions."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {
            showStepCount: false,
            to: "/settings/api-tokens"
          })
        ]
      }),
      when: (completedActions) => completedActions.includes("didCreateContent")
    }
  ]),
  apiTokens: createTour("apiTokens", [
    {
      name: "Introduction",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        sideOffset: -36,
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.apiTokens.Introduction.title",
            defaultMessage: "API tokens"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.apiTokens.Introduction.content",
            defaultMessage: "Create and manage API tokens with highly customizable permissions."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {
            showSkip: true
          })
        ]
      }),
      when: (completedActions) => !completedActions.includes("didCreateApiToken")
    },
    {
      name: "CreateAnAPIToken",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "bottom",
        sideOffset: 20,
        align: "end",
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.apiTokens.CreateAnAPIToken.title",
            defaultMessage: "Create an API token"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.apiTokens.CreateAnAPIToken.content",
            defaultMessage: "Create a new API token. Choose a name, duration and type."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      })
    },
    {
      name: "CopyAPIToken",
      content: (Step) => (0, import_jsx_runtime3.jsxs)(Step.Root, {
        side: "bottom",
        align: "start",
        children: [
          (0, import_jsx_runtime3.jsx)(Step.Title, {
            id: "tours.apiTokens.CopyAPIToken.title",
            defaultMessage: "Copy your new API token"
          }),
          (0, import_jsx_runtime3.jsx)(Step.Content, {
            id: "tours.apiTokens.CopyAPIToken.content",
            defaultMessage: "Make sure to do it now, you won’t be able to see it again. You’ll need to generate a new one if you lose it."
          }),
          (0, import_jsx_runtime3.jsx)(Step.Actions, {})
        ]
      }),
      when: (completedActions) => completedActions.includes("didCreateApiToken")
    },
    {
      name: "Finish",
      content: (Step) => {
        const dispatch = unstableUseGuidedTour("GuidedTourPopover", (s) => s.dispatch);
        return (0, import_jsx_runtime3.jsxs)(Step.Root, {
          side: "right",
          align: "start",
          sideOffset: 32,
          children: [
            (0, import_jsx_runtime3.jsx)(Step.Title, {
              id: "tours.apiTokens.FinalStep.title",
              defaultMessage: "It’s time to deploy your application!"
            }),
            (0, import_jsx_runtime3.jsx)(Step.Content, {
              id: "tours.apiTokens.FinalStep.content",
              defaultMessage: "Your application is ready to be deployed and its content to be shared with the world!"
            }),
            (0, import_jsx_runtime3.jsx)(Step.Actions, {
              showStepCount: false,
              children: (0, import_jsx_runtime3.jsx)(Flex, {
                justifyContent: "end",
                width: "100%",
                children: (0, import_jsx_runtime3.jsx)(LinkButton, {
                  onClick: () => {
                    dispatch({
                      type: "next_step",
                      payload: "apiTokens"
                    });
                  },
                  tag: NavLink,
                  to: "/",
                  children: (0, import_jsx_runtime3.jsx)(message_default, {
                    id: "tours.gotIt",
                    defaultMessage: "Got it"
                  })
                })
              })
            })
          ]
        });
      },
      when: (completedActions) => completedActions.includes("didCopyApiToken")
    }
  ]),
  strapiCloud: createTour("strapiCloud", [])
};
var UnstableGuidedTourTooltip = ({ children, ...props }) => {
  const state = unstableUseGuidedTour("TooltipWrapper", (s) => s.state);
  const hasFutureFlag = window.strapi.future.isEnabled("unstableGuidedTour");
  if (!state.enabled) {
    return (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, {
      children
    });
  }
  if (!hasFutureFlag) {
    return (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, {
      children
    });
  }
  return (0, import_jsx_runtime3.jsx)(GuidedTourTooltipImpl, {
    ...props,
    children
  });
};
var GuidedTourOverlay = dt(Box)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(50, 50, 77, 0.2);
  z-index: 10;
`;
var GuidedTourTooltipImpl = ({ children, content, tourName, step, when }) => {
  var _a, _b;
  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();
  const state = unstableUseGuidedTour("UnstableGuidedTourTooltip", (s) => s.state);
  const dispatch = unstableUseGuidedTour("UnstableGuidedTourTooltip", (s) => s.dispatch);
  const isCurrentStep = state.tours[tourName].currentStep === step;
  const isStepConditionMet = when ? when(state.completedActions) : true;
  const isPopoverOpen = ((_a = guidedTourMeta == null ? void 0 : guidedTourMeta.data) == null ? void 0 : _a.isFirstSuperAdminUser) && !state.tours[tourName].isCompleted && isCurrentStep && isStepConditionMet;
  React3.useEffect(() => {
    if (!isPopoverOpen) return;
    const originalStyle = window.getComputedStyle(document.body).overflow;
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = originalStyle;
    };
  }, [
    isPopoverOpen
  ]);
  React3.useEffect(() => {
    var _a2;
    dispatch({
      type: "set_completed_actions",
      payload: ((_a2 = guidedTourMeta == null ? void 0 : guidedTourMeta.data) == null ? void 0 : _a2.completedActions) ?? []
    });
  }, [
    dispatch,
    (_b = guidedTourMeta == null ? void 0 : guidedTourMeta.data) == null ? void 0 : _b.completedActions
  ]);
  const Step = React3.useMemo(() => createStepComponents(tourName), [
    tourName
  ]);
  return (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
    children: [
      isPopoverOpen && (0, import_jsx_runtime3.jsx)(Portal$1, {
        children: (0, import_jsx_runtime3.jsx)(GuidedTourOverlay, {})
      }),
      (0, import_jsx_runtime3.jsxs)(Popover.Root, {
        open: isPopoverOpen,
        children: [
          (0, import_jsx_runtime3.jsx)(Popover.Anchor, {
            children
          }),
          content(Step, {
            state,
            dispatch
          })
        ]
      })
    ]
  });
};
function createTour(tourName, steps) {
  const tour = steps.reduce((acc, step, index) => {
    if (step.name in acc) {
      throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);
    }
    acc[step.name] = ({ children }) => {
      return (0, import_jsx_runtime3.jsx)(UnstableGuidedTourTooltip, {
        tourName,
        step: index,
        content: step.content,
        when: step.when,
        children
      });
    };
    return acc;
  }, {});
  return tour;
}

export {
  usePersistentState,
  tours,
  unstableUseGuidedTour,
  UnstableGuidedTourContext
};
//# sourceMappingURL=chunk-APY4KZ5L.js.map
